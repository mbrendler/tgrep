#! /usr/bin/env ruby
require_relative '../lib/tgrep'

if $stdout.tty?
  TPUT_PRIMARY = "#{`tput setaf 2`}#{`tput bold`}".freeze
  TPUT_KEY = `tput setaf 4`.freeze
  TPUT_CLEAR = "#{`tput op`}#{`tput sgr0`}".freeze
else
  TPUT_PRIMARY = ''.freeze
  TPUT_KEY = ''.freeze
  TPUT_CLEAR = ''.freeze
end

module Printer
  def self.find_best_signature(tags)
    tags.map(&:signature).max_by(&:size)
  end

  def self.pretty_print(all_tags, config)
    all_tags.each do |tags|
      tag = tags[0]
      name = tag.name.sub(/^#{tag.data[:class]}::/, '')
      puts("#{TPUT_KEY}#{tag.data[:class]}#{TPUT_CLEAR}::#{TPUT_PRIMARY}#{name}#{TPUT_CLEAR}#{find_best_signature(tags)} // #{tags[0].code}")
      tags.each do |t|
        filename = config.full_path ? t.absolute_filename : t.filename
        puts(" #{TPUT_KEY}#{t.kind}#{TPUT_CLEAR} #{filename}:#{t.line_numbers.join(' ')}")
      end
      puts
    end
  end
end

module Tgrep
  def self.main(args)
    config = Config.parse(args)
    matcher = config.matcher
    tags = Tags.new
    config.open_tagfile.each_line do |line|
      next if line.start_with?('!_TAG_')
      if config.outline
        tag_hash = Tag.parse(line)
        next if Tag.class_name(tag_hash) != config.tag
      else
        next unless matcher.match?(line)
        tag_hash = Tag.parse(line)
        next unless check_patterns(tag_hash[:filename], config.file_patterns)
        next unless check_patterns(Tag.class_name(tag_hash), config.classes)
      end
      tag = Tag.new(tag_hash, config.base_dir)
      tags.add(tag)
      LineNumbers.add_tag(tag)
    end
    exit(1) if tags.empty?
    tags.sort!
    Printer.pretty_print(tags, config)
  end

  def self.check_patterns(str, patterns)
    return true if patterns.empty?
    patterns.any?{ |pattern| /#{pattern}/.match?(str) }
  end
end

Tgrep.main(ARGV) if $PROGRAM_NAME == __FILE__
