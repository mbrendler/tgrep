#! /usr/bin/env ruby
require_relative '../lib/tgrep'

module Tgrep
  def self.main(args)
    config = Config.parse(args)
    matcher = config.matcher
    tags = Tags.new
    config.open_tagfile.each_line do |line|
      next if line.start_with?('!_TAG_')
      if config.outline
        tag_hash = Tag.parse(line)
        next if Tag.full_class_name(tag_hash) != config.tag
      else
        next unless matcher.match?(line)
        tag_hash = Tag.parse(line)
        next unless check_patterns(tag_hash[:filename], config.file_patterns)
        next unless check_patterns(Tag.full_class_name(tag_hash), config.classes)
      end
      tag = Tag.new(tag_hash, config.base_dir)
      tags.add(tag)
    end
    exit(1) if tags.empty?
    tags.collect_line_numbers(config.encoding)
    tags.sort!
    tags.each{ |tag| Pretty.print(tag, config) }
  end

  def self.check_patterns(str, patterns)
    return true if patterns.empty?
    patterns.any?{ |pattern| /#{pattern}/.match?(str) }
  end
end

Tgrep.main(ARGV) if $PROGRAM_NAME == __FILE__
