#! /usr/bin/env ruby
require_relative '../lib/tags'

if $stdout.tty?
  TPUT_PRIMARY = "#{`tput setaf 2`}#{`tput bold`}".freeze
  TPUT_KEY = `tput setaf 4`.freeze
  TPUT_CLEAR = "#{`tput op`}#{`tput sgr0`}".freeze
else
  TPUT_PRIMARY = ''.freeze
  TPUT_KEY = ''.freeze
  TPUT_CLEAR = ''.freeze
end

module Tags
  def self.all
    @tags ||= Hash.new{ |h, k| h[k] = [] }
  end

  def self.add(tag)
    all[tag.indentifier] << tag
  end

  def self.find_best_signature(tags)
    tags.map(&:signature).max_by(&:size)
  end

  def self.sort
    all.values.each(&:sort!)
    @tags = Hash[all.sort_by{ |_, tags| [tags[0].class, tags[0].line_numbers[0] || 0] }]
  end

  def self.pretty_print
    all.values.each do |tags|
      tag = tags[0]
      name = tag.name.sub(/^#{tag.extra[:class]}::/, '')
      puts("#{TPUT_KEY}#{tag.extra[:class]}#{TPUT_CLEAR}::#{TPUT_PRIMARY}#{name}#{TPUT_CLEAR}#{find_best_signature(tags)}")
      tags.each do |t|
        puts(" #{TPUT_KEY}#{t.kind}#{TPUT_CLEAR} #{t.filename}:#{t.line_numbers.join(' ')}")
      end
      puts
    end
  end
end

def check_patterns(str, patterns)
  return true if patterns.empty?
  patterns.any?{ |pattern| /#{pattern}/.match?(str) }
end

def main(args)
  config = Config.parse(args)
  matcher = config.matcher
  config.open_tagfile.each_line do |line|
    next if line.start_with?('!_TAG_')
    if config.outline
      tag = Tag.parse(config.base_dir, line)
      Tags.add(tag) if (tag.kind == 'c' && tag.name == config.tag) || tag.extra[:class] == config.tag
    else
      next unless matcher.match?(line)
      tag = Tag.parse(config.base_dir, line)
      next unless check_patterns(tag.filename, config.file_patterns)
      next unless check_patterns(tag.extra[:class], config.classes)
      Tags.add(tag)
    end
  end
  exit(1) if Tags.all.empty?
  Tags.sort
  Tags.pretty_print
end

main(ARGV) if __FILE__ == $PROGRAM_NAME
